import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { AxiosError } from "axios";
import { SampleCounterBody } from "./counterAPI";

// Define the type for the counter state
interface CounterState {
  value: number;
}

// Define the initial state for the counter
const initialState: CounterState = {
  value: 0,
};

export const sampleThunk = createAsyncThunk(
  "counter/sampleThunk",
  async (params: SampleCounterBody, thunkAPI) => {
    try {
      //create a promise
      console.log(params);
      const promise = new Promise<number>((resolve) => {
        setTimeout(() => {
          resolve(1);
        }, 1000);
      });
      return promise;
    } catch (error) {
      return thunkAPI.rejectWithValue((error as AxiosError).response?.data);
    }
  },
);

export const counterSlice = createSlice({
  name: "counter", // A unique identifier for the slice
  initialState,
  reducers: {
    increment: (state) => {
      state.value++; // Update state immutably
    },
    decrement: (state) => {
      state.value--; // Update state immutably
    },
    setValue: (state, action) => {
      state.value = action.payload; // Update state with payload value (number)
    },
  },
  extraReducers: (builder) => {
    builder.addCase(sampleThunk.fulfilled, (state, action) => {
      state.value = action.payload;
      console.log(
        "%cThis is a styled message",
        "color: green; font-size: 16px;",
      );
    });
    // .addCase(sampleThunk.rejected, (_state, _action) => {
    //   // add colored console here
    //   console.log(
    //     "%cThis is a styled message",
    //     "color: red; font-size: 16px;",
    //   );
    // })
    // .addCase(sampleThunk.pending, (_state, _action) => {
    //   console.log(
    //     "%cThis is a styled message",
    //     "color: yellow; font-size: 16px;",
    //   );
    // });
  },
});

// Export the actions generated by the slice
export const { increment, decrement, setValue } = counterSlice.actions;

// Export the counter reducer
export default counterSlice.reducer;
